#include <iostream>
#include <list>
using namespace std;

// ====================== HASH TABLE - SEPARATE CHAINING ======================
class HashTableChaining {
private:
    list<pair<int, int>> table[10];

    int hashFunction(int key) {
        return key % 10;
    }

public:
    void insertData(int key, int value) {
        int index = hashFunction(key);
        table[index].push_back(make_pair(key, value));
    }

    void searchData(int key) {
        int index = hashFunction(key);
        for (auto &item : table[index]) {
            if (item.first == key) {
                cout << "Key " << key << " ditemukan dengan value = " << item.second << endl;
                return;
            }
        }
        cout << "Key " << key << " tidak ditemukan" << endl;
    }

    void deleteData(int key) {
        int index = hashFunction(key);
        for (auto it = table[index].begin(); it != table[index].end(); it++) {
            if (it->first == key) {
                table[index].erase(it);
                return;
            }
        }
        cout << "Key " << key << " tidak ditemukan, tidak bisa dihapus" << endl;
    }

    void display() {
        cout << "Isi Hash Table:" << endl;
        for (int i = 0; i < 10; i++) {
            cout << i << ": ";
            if (table[i].empty())
                cout << "NULL";
            else {
                for (auto &item : table[i]) {
                    cout << "(" << item.first << "," << item.second << ") -> ";
                }
                cout << "NULL";
            }
            cout << endl;
        }
        cout << endl;
    }
};

// ================= HASH TABLE - OPEN ADDRESSING (LINEAR PROBING) =================
class HashTableLinearProbing {
private:
    pair<int, int> table[10];
    string status[10];

    int hashFunction(int key) {
        return key % 10;
    }

public:
    HashTableLinearProbing() {
        for (int i = 0; i < 10; i++) {
            status[i] = "EMPTY";
            table[i] = {-1, -1};
        }
    }

    void insertData(int key, int value) {
        int index = has
